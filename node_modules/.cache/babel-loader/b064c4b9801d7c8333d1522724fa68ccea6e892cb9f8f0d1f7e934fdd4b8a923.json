{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\Codes\\\\Web Developmet\\\\netflix-clone\\\\src\\\\component\\\\Row\\\\Row.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from '../../axios';\nimport './Row.css';\nimport Youtube from \"react-youtube\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nfunction Row(_ref) {\n  _s();\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster  ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","Youtube","jsxDEV","_jsxDEV","base_url","Row","_ref","_s","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","src","poster_path","backdrop_path","alt","name","id","videoId","trailerUrl","_c","$RefreshReg$"],"sources":["C:/Users/asus/Desktop/Codes/Web Developmet/netflix-clone/src/component/Row/Row.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from '../../axios';\r\nimport './Row.css';\r\nimport Youtube from \"react-youtube\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n\r\n            <div className={\"row__posters\"}>\r\n\r\n                {movies.map(movie => (\r\n                    <img key={movie.id} className={`row__poster  ${isLargeRow && \"row__posterLarge\"}`} src={`${base_url}${isLargeRow ?  movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                ))}\r\n\r\n            </div>\r\n            <Youtube videoId={trailerUrl} opts={opts} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAO,WAAW;AAClB,OAAOC,OAAO,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,QAAQ,GAAG,sCAAsC;AAEvD,SAASC,GAAGA,CAAAC,IAAA,EAAkC;EAAAC,EAAA;EAAA,IAAjC;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAAJ,IAAA;EAExC,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,eAAec,SAASA,CAAA,EAAG;MACvB,MAAMC,OAAO,GAAG,MAAMd,KAAK,CAACe,GAAG,CAACN,QAAQ,CAAC;MACzCG,SAAS,CAACE,OAAO,CAACE,IAAI,CAACC,OAAO,CAAC;MAC/B,OAAOH,OAAO;IAClB;IACAD,SAAS,EAAE;EACf,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,MAAMS,IAAI,GAAG;IACTC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,MAAM;IACbC,UAAU,EAAE;MACRC,QAAQ,EAAE;IACd;EACJ,CAAC;EAED,oBACInB,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBrB,OAAA;MAAAqB,QAAA,EAAKhB;IAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eAEhBzB,OAAA;MAAKoB,SAAS,EAAE,cAAe;MAAAC,QAAA,EAE1Bb,MAAM,CAACkB,GAAG,CAACC,KAAK,iBACb3B,OAAA;QAAoBoB,SAAS,EAAG,gBAAeb,UAAU,IAAI,kBAAmB,EAAE;QAACqB,GAAG,EAAG,GAAE3B,QAAS,GAAEM,UAAU,GAAIoB,KAAK,CAACE,WAAW,GAAGF,KAAK,CAACG,aAAc,EAAE;QAACC,GAAG,EAAEJ,KAAK,CAACK;MAAK,GAArKL,KAAK,CAACM,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACrB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEA,eACNzB,OAAA,CAACF,OAAO;MAACoC,OAAO,EAAEC,UAAW;MAACpB,IAAI,EAAEA;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC1C;AAEd;AAACrB,EAAA,CAnCQF,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAqCZ,eAAeA,GAAG;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}